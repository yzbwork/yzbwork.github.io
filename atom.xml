<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.travelfun.top/"/>
  <updated>2019-03-09T07:49:50.773Z</updated>
  <id>https://blog.travelfun.top/</id>
  
  <author>
    <name>Yu Zhibo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UITableView</title>
    <link href="https://blog.travelfun.top/post/7e78edc3.html"/>
    <id>https://blog.travelfun.top/post/7e78edc3.html</id>
    <published>2019-03-09T07:30:10.000Z</published>
    <updated>2019-03-09T07:49:50.773Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>在UITableViewController中self.view和self.tableView是指同一个view。</p></li><li><p>UITableView设置为group时，顶部会有空白距离，需要在heightforviewinsecetion内设置高为float类型的小数</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;在UITableViewController中self.view和self.tableView是指同一个view。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UITableView设置为group时，顶部会有空白距离，需要在heightforviewinsecet
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.travelfun.top/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://blog.travelfun.top/tags/iOS/"/>
    
      <category term="UITableView" scheme="https://blog.travelfun.top/tags/UITableView/"/>
    
  </entry>
  
  <entry>
    <title>HTTPS-适配</title>
    <link href="https://blog.travelfun.top/post/86809e2e.html"/>
    <id>https://blog.travelfun.top/post/86809e2e.html</id>
    <published>2019-03-09T07:25:09.000Z</published>
    <updated>2019-03-09T07:49:50.772Z</updated>
    
    <content type="html"><![CDATA[<h4 id="需要先检查服务器证书："><a href="#需要先检查服务器证书：" class="headerlink" title="需要先检查服务器证书："></a>需要先检查服务器证书：</h4><p>（三种方法，推荐最后一种）</p><h5 id="在腾讯云ATS上检测，"><a href="#在腾讯云ATS上检测，" class="headerlink" title="在腾讯云ATS上检测，"></a>在腾讯云ATS上检测，</h5><p>  <a href="https://www.qcloud.com/product/ssl" target="_blank" rel="noopener">https://www.qcloud.com/product/ssl</a></p><h5 id="直接看证书，注意证书签名算法，"><a href="#直接看证书，注意证书签名算法，" class="headerlink" title="直接看证书，注意证书签名算法，"></a>直接看证书，注意证书签名算法，</h5><p><img src="http://upload-images.jianshu.io/upload_images/1130084-94bff11cb1da8c10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.png"></p><h5 id="mac终端检查，（以百度为例）"><a href="#mac终端检查，（以百度为例）" class="headerlink" title="mac终端检查，（以百度为例）"></a>mac终端检查，（以百度为例）</h5><pre><code>nscurl --ats-diagnostics https://baidu.com</code></pre><p>一堆测试结果，注意看Result是PASS的，<br>如：<br><img src="http://upload-images.jianshu.io/upload_images/1130084-17982d70cbe18c31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.png"><br>这种result是通过的，说明需要在info.plist里面添加该属性为false，即可通过。</p><h4 id="在info-plist里面添加以下属性"><a href="#在info-plist里面添加以下属性" class="headerlink" title="在info.plist里面添加以下属性"></a>在info.plist里面添加以下属性</h4><p>（用到webview，最好在info.plist里面设置一下属性，这样UIwebview不用再单独设置）</p><pre><code>&lt;key&gt;NSAppTransportSecurity&lt;/key&gt; &lt;dict&gt;          &lt;key&gt;NSExceptionDomains&lt;/key&gt;          &lt;dict&gt;        &lt;key&gt;对应域名&lt;/key&gt;                        &lt;dict&gt;              &lt;key&gt;NSIncludesSubdomains&lt;/key&gt;              &lt;true/&gt;                                      &lt;key&gt;NSExceptionRequiresForwardSecrecy&lt;/key&gt;              &lt;false/&gt;                       &lt;/dict&gt;                   &lt;/dict&gt; &lt;/dict&gt;</code></pre><p>主要是<br><strong>NSExceptionRequiresForwardSecrecy</strong>，默认值为YES，置为NO后，访问该域名时TLS ciphers可以不支持完全正向保密（PFS）（注意: 腾讯云检测时候可能提示支持完整正向加密，但是如果算法是SHA-1，则需要设置改属性为NO）。</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><blockquote><p>NSAllowsArbitraryLoads、<br>NSAllowsArbitraryLoadsForMedia、<br>NSAllowsArbitraryLoadsInWebContent、<br>NSExceptionAllowsInsecureHTTPLoads</p></blockquote><p>任一属性置为YES 或设置 <strong>NSExceptionMinimumTLSVersion</strong>，<br>都会触发App Store的额外审核并需要提交对应说明</p>]]></content>
    
    <summary type="html">
    
      HTTPS 适配，HTTPS证书检测
    
    </summary>
    
      <category term="iOS" scheme="https://blog.travelfun.top/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://blog.travelfun.top/tags/iOS/"/>
    
      <category term="HTTPS" scheme="https://blog.travelfun.top/tags/HTTPS/"/>
    
      <category term="服务器证书" scheme="https://blog.travelfun.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>添加pch</title>
    <link href="https://blog.travelfun.top/post/f898aa72.html"/>
    <id>https://blog.travelfun.top/post/f898aa72.html</id>
    <published>2019-03-09T07:23:27.000Z</published>
    <updated>2019-03-09T07:49:50.774Z</updated>
    
    <content type="html"><![CDATA[<p>Xcode6之后，pch预编译文件默认是不带的，需要自己创建pch文件</p><ol><li><p>新建之后选择 Project &gt; Build Settings &gt; 搜索 “Prefix Header“，</p></li><li><p>添加路径，项目名称／pch文件名称.pch<br>向pch添加全局的头文件之前，要加上 #ifdef __OBJC__  #end。<br>如：</p></li></ol><pre><code>    #import &lt;Availability.h&gt;    #ifndef __IPHONE_3_0    #warning &quot;This project uses features only available in iOS SDK 3.0 and later.&quot;    #endif    #ifdef __OBJC__    #import &lt;UIKit/UIKit.h&gt;    #import &lt;Foundation/Foundation.h&gt;    #endif这个宏定义的作用是保证只有OC文件可以调用pch里面的头文件，非OC语言]不能调用，比如.cpp，.mm。</code></pre><p>没有这个宏定义，代码中带有.cpp，.mm文件，将报错。NSObjCRuntime.h，NSObject.h，NSZone.h会编译异常。</p><ol start="3"><li><p>将Precompile Prefix Header为YES，预编译后的pch文件会被缓存起来，可以提高编译速度</p></li><li><p>Clean 然后 build 工程</p></li></ol>]]></content>
    
    <summary type="html">
    
      Xcode6之后，pch预编译文件默认是不带的，需要自己创建pch文件
    
    </summary>
    
      <category term="iOS" scheme="https://blog.travelfun.top/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://blog.travelfun.top/tags/iOS/"/>
    
      <category term="pch" scheme="https://blog.travelfun.top/tags/pch/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu报错</title>
    <link href="https://blog.travelfun.top/post/be0d86cc.html"/>
    <id>https://blog.travelfun.top/post/be0d86cc.html</id>
    <published>2019-03-08T07:22:06.000Z</published>
    <updated>2019-03-08T07:27:55.598Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Ubuntu添加源的时候报下面的错误时："><a href="#Ubuntu添加源的时候报下面的错误时：" class="headerlink" title="Ubuntu添加源的时候报下面的错误时："></a>Ubuntu添加源的时候报下面的错误时：</h5><pre><code>sudo: add-apt-repository: command not found</code></pre><p>依次安装：</p><pre><code>sudo apt-get install python-software-propertiessudo apt install software-properties-common sudo apt-get update</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;Ubuntu添加源的时候报下面的错误时：&quot;&gt;&lt;a href=&quot;#Ubuntu添加源的时候报下面的错误时：&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu添加源的时候报下面的错误时：&quot;&gt;&lt;/a&gt;Ubuntu添加源的时候报下面的错误时：&lt;/h5&gt;&lt;
      
    
    </summary>
    
      <category term="Ubuntu" scheme="https://blog.travelfun.top/categories/Ubuntu/"/>
    
    
      <category term="服务器" scheme="https://blog.travelfun.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Ubuntu" scheme="https://blog.travelfun.top/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Apache常用命令</title>
    <link href="https://blog.travelfun.top/post/2a529d9a.html"/>
    <id>https://blog.travelfun.top/post/2a529d9a.html</id>
    <published>2019-03-08T07:21:48.000Z</published>
    <updated>2019-03-08T07:27:55.597Z</updated>
    
    <content type="html"><![CDATA[<pre><code>重启：sudo apachectl restart关闭：sudo apachectl stop开启：sudo apachectl start</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;重启：sudo apachectl restart
关闭：sudo apachectl stop
开启：sudo apachectl start
&lt;/code&gt;&lt;/pre&gt;
      
    
    </summary>
    
      <category term="Apache" scheme="https://blog.travelfun.top/categories/Apache/"/>
    
    
      <category term="Apache" scheme="https://blog.travelfun.top/tags/Apache/"/>
    
      <category term="服务器" scheme="https://blog.travelfun.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="常用" scheme="https://blog.travelfun.top/tags/%E5%B8%B8%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu搭建Git服务器</title>
    <link href="https://blog.travelfun.top/post/9505f26a.html"/>
    <id>https://blog.travelfun.top/post/9505f26a.html</id>
    <published>2019-03-08T07:19:22.000Z</published>
    <updated>2019-03-08T07:27:55.597Z</updated>
    
    <content type="html"><![CDATA[<h5 id="安装git："><a href="#安装git：" class="headerlink" title="安装git："></a>安装git：</h5><pre><code>$ sudo apt-get install git</code></pre><h5 id="创建一个git用户，用来运行git服务，并为-git-用户设置密码："><a href="#创建一个git用户，用来运行git服务，并为-git-用户设置密码：" class="headerlink" title="创建一个git用户，用来运行git服务，并为 git 用户设置密码："></a>创建一个git用户，用来运行git服务，并为 git 用户设置密码：</h5><pre><code>$ sudo adduser git</code></pre><p>下面这样新建用户不会在/home/下生成用户文件夹</p><pre><code>[root@localhost home]# useradd git[root@localhost home]# passwd git</code></pre><h5 id="服务器端创建-Git-仓库"><a href="#服务器端创建-Git-仓库" class="headerlink" title="服务器端创建 Git 仓库"></a>服务器端创建 Git 仓库</h5><p> 设置 /home/git/git.git 为 Git 仓库<br>然后把 Git 仓库的 owner 修改为 git</p><pre><code>[root@localhost home]# mkdir -p git/git.git[root@localhost home]# git init --bare git/git.gitInitialized empty Git repository in /home/git/git.git/[root@localhost home]# cd git/[root@localhost git]# chown -R git:git git.git/</code></pre><h5 id="从-Linux-Git-服务器上-clone-项目："><a href="#从-Linux-Git-服务器上-clone-项目：" class="headerlink" title="从 Linux Git 服务器上 clone 项目："></a>从 Linux Git 服务器上 clone 项目：</h5><pre><code>$ git clone git@192.168.1.35:/home/git/git.git</code></pre><p>如果SSH用的不是默认的22端口，则需要使用以下的命令（假设SSH端口号是7700）：</p><pre><code>$ git clone ssh://git@192.168.1.35:7700/home/git/git.git</code></pre><h5 id="禁用shell登录："><a href="#禁用shell登录：" class="headerlink" title="禁用shell登录："></a>禁用shell登录：</h5><p>出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：</p><pre><code>git:x:1001:1001:,,,:/home/git:/bin/bash</code></pre><p>改为：</p><pre><code>git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</code></pre><p>这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。</p>]]></content>
    
    <summary type="html">
    
      Git服务器搭建
    
    </summary>
    
      <category term="Git" scheme="https://blog.travelfun.top/categories/Git/"/>
    
    
      <category term="Git" scheme="https://blog.travelfun.top/tags/Git/"/>
    
      <category term="Ubuntu" scheme="https://blog.travelfun.top/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Django部署</title>
    <link href="https://blog.travelfun.top/post/60e45118.html"/>
    <id>https://blog.travelfun.top/post/60e45118.html</id>
    <published>2019-03-08T07:03:45.000Z</published>
    <updated>2019-03-08T07:06:50.961Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>环境：Ubuntu 16.04.4,  Django 2.0.4,  Python 3.6.1,  Nginx 1.10.3, uWSGI 5.4.0</p></blockquote><p>为避免多个项目环境相互影响，部署在virtualenv下</p><h4 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h4><p>注意：建议先不要安装python-dev</p><pre><code>sudo apt-get install  nginx sudo pip install virtualenvpip install virtualenvwrapper</code></pre><p>注意安装顺序。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><h5 id="virtualenvwrapper相关配置"><a href="#virtualenvwrapper相关配置" class="headerlink" title="virtualenvwrapper相关配置"></a>virtualenvwrapper相关配置</h5><p>安装virtualenvwrapper之后不能直接使用，需要配置路径，首先找到对应的virtualenvwrapper.sh文件的路径:</p><pre><code>find / -name virtualenvwrapper.sh</code></pre><p>路径为：/usr/local/bin/virtualenvwrapper.sh<br>找到路径之后在/etc/profile中添加：</p><pre><code>export WORKON_HOME=/home/virtualenvs source /usr/local/bin/virtualenvwrapper.sh</code></pre><p>保存之后：</p><pre><code>source /etc/profile</code></pre><p>接下来就可以使用相关命令来操作。</p><h5 id="uWSGI相关配置"><a href="#uWSGI相关配置" class="headerlink" title="uWSGI相关配置"></a>uWSGI相关配置</h5><p>安装uWSGI在虚拟环境下安装，<br>注意：如果python3环境下如果安装不上，在服务器上安装</p><pre><code>sudo apt-get install libpython3.6-dev  </code></pre><p>安装完之后，再在虚拟环境下安装uWSGI，之后运行的时候也需要在虚拟环境下运行<br>在项目目录下新建uwsgi.ini</p><pre><code>[uwsgi]chdir=/home/sites/mysite/module=mysite.wsgi:applicationworkers=5pidfile=/home/sites/mysite/script/uwsgi.pidhttp=0.0.0.0:8080static-map=/statics=/home/sites/mysite/staticsuid=rootgid=rootmaster=truevacuum=truethunder-lock=trueenable-threads=trueharakiri=30post-buffering=4096daemonize=/home/sites/mysite/script/uwsgi.logsocket=/home/sites/mysite/script/uwsgi.sock  # 要跟nginx里面的uwsgi_pass一样</code></pre><p>uwsgi部分常用命令：</p><pre><code>uwsgi --ini uwsgi.ini   # 启动uwsgi配置uwsgi --stop uwsgi.pid  # 关闭uwsgiuwsgi --reload uwsgi.pid  #重新加载配置</code></pre><h5 id="Nginx相关配置"><a href="#Nginx相关配置" class="headerlink" title="Nginx相关配置"></a>Nginx相关配置</h5><p>创建一个name.conf配置文件（nginx的默认配置目录为/etc/nginx/conf.d）</p><pre><code>nano /etc/nginx/conf.d/xxx.conf</code></pre><p>配置文件信息如下：</p><pre><code>server {    listen      80;    server_name server_name;    access_log  /var/log/nginx/access.log;  # Nginx日志配置    error_log  /var/log/nginx/error.log;    charset     utf-8;    gzip on;  # 启用压缩    gzip_types text/plain application/x-javascript text/css text/java$    error_page  404           /404.html;  # 错误页面    error_page   500 502 503 504  /50x.html;  # 错误页面    client_max_body_size 75M;    location / {            include     uwsgi_params;            uwsgi_connect_timeout 30;            uwsgi_pass  unix:///home/sites/mysite/script/uwsgi.sock;            }    location /static/ {            alias  静态文件路径;            index 首页路径;    }}</code></pre><p>检查nginx语法问题:</p><pre><code>nginx -t  </code></pre><p>正确的话会出现：</p><pre><code>nginx: the configuration file /etc/nginx/nginx.conf syntax is oknginx: configuration file /etc/nginx/nginx.conf test is successful</code></pre><p>nginx部分常用命令：</p><pre><code>/etc/init.d/nginx start  #启动/etc/init.d/nginx stop  #关闭/etc/init.d/nginx restart  #重启killall nginx   /etc/init.d/nginx reload</code></pre><h5 id="Django-setting-py更改设置"><a href="#Django-setting-py更改设置" class="headerlink" title="Django setting.py更改设置"></a>Django setting.py更改设置</h5><pre><code>DEBUG = FalseSTATIC_ROOT = os.path.join(BASE_DIR, &apos;statics&apos;)</code></pre><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>打开虚拟环境，cd到uwsgi.ini所在目录下，</p><pre><code>uwsgi --ini uwsgi.ini /etc/init.d/nginx start</code></pre><p>正常的话，就可以访问网站了<br>静态文件收集：cd到manage.py所在目录下，</p><pre><code>python manage.py collectstatic</code></pre>]]></content>
    
    <summary type="html">
    
      Django Ubuntu 服务器的配置部署步骤
    
    </summary>
    
      <category term="Django" scheme="https://blog.travelfun.top/categories/Django/"/>
    
    
      <category term="Django" scheme="https://blog.travelfun.top/tags/Django/"/>
    
      <category term="Python" scheme="https://blog.travelfun.top/tags/Python/"/>
    
      <category term="部署" scheme="https://blog.travelfun.top/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>树莓派配置</title>
    <link href="https://blog.travelfun.top/post/cfe260ea.html"/>
    <id>https://blog.travelfun.top/post/cfe260ea.html</id>
    <published>2019-03-08T06:55:32.000Z</published>
    <updated>2019-03-08T07:06:50.962Z</updated>
    
    <content type="html"><![CDATA[<h3 id="更换阿里云源"><a href="#更换阿里云源" class="headerlink" title="更换阿里云源"></a>更换阿里云源</h3><pre><code>sudo nano /etc/apt/sources.list</code></pre><p>注释掉原来的源后，添加</p><pre><code>deb http://mirrors.aliyun.com/raspbian/raspbian/jessie main non-free contribdeb-src http://mirrors.aliyun.com/raspbian/raspbian/jessie main non-free contrib</code></pre><h3 id="启用root账号"><a href="#启用root账号" class="headerlink" title="启用root账号"></a>启用root账号</h3><pre><code>sudo passwd root</code></pre><p>根据提示设置密码，切换到root管理员 </p><pre><code>su root </code></pre><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><pre><code>sudo apt-get update &amp;&amp; apt-get upgrade -y</code></pre>]]></content>
    
    <summary type="html">
    
      树莓派系统安装之后配置，更换阿里云源，并启用root账户
    
    </summary>
    
      <category term="树莓派" scheme="https://blog.travelfun.top/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
      <category term="配置" scheme="https://blog.travelfun.top/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>树莓派MacOS下安装系统</title>
    <link href="https://blog.travelfun.top/post/6e4ab319.html"/>
    <id>https://blog.travelfun.top/post/6e4ab319.html</id>
    <published>2019-03-08T06:50:20.000Z</published>
    <updated>2019-03-08T06:59:45.957Z</updated>
    
    <content type="html"><![CDATA[<h5 id="确认镜像位于当前目录下"><a href="#确认镜像位于当前目录下" class="headerlink" title="确认镜像位于当前目录下"></a>确认镜像位于当前目录下</h5><h5 id="将SD卡插入电脑"><a href="#将SD卡插入电脑" class="headerlink" title="将SD卡插入电脑"></a>将SD卡插入电脑</h5><h5 id="查看SD卡对应的设备文件和准备工作（如果使用SD-TF读卡器，以下操作类似）"><a href="#查看SD卡对应的设备文件和准备工作（如果使用SD-TF读卡器，以下操作类似）" class="headerlink" title="查看SD卡对应的设备文件和准备工作（如果使用SD/TF读卡器，以下操作类似）"></a>查看SD卡对应的设备文件和准备工作（如果使用SD/TF读卡器，以下操作类似）</h5><p>查看当前已挂载的卷：</p><pre><code>df -h</code></pre><p>得到如下类似信息：</p><pre><code>Filesystem      Size   Used  Avail Capacity  Mounted on/dev/disk0s2   112Gi   96Gi   15Gi    87%    /devfs          183Ki  183Ki    0Bi   100%    /devmap -hosts       0Bi    0Bi    0Bi   100%    /netmap auto_home    0Bi    0Bi    0Bi   100%    /home/dev/disk1s1    15Gi  2.3Mi   15Gi     1%    /Volumes/未命名</code></pre><p>对比Size和Name可以找到SD卡的分区在系统里对应的设备文件（这里是/dev/disk1s1），如果你有多个分区，可能还会有disk1s2之类的。使用diskutil unmount将这些分区卸载：</p><pre><code>diskutil unmount /dev/disk1s1</code></pre><p>确认设备：</p><pre><code>diskutil list</code></pre><p>得到如下类似信息：</p><pre><code>/dev/disk0   #:                       TYPE NAME                    SIZE       IDENTIFIER   0:      GUID_partition_scheme                        *121.3 GB   disk0   1:                        EFI                         209.7 MB   disk0s1   2:                  Apple_HFS Macintosh HD            120.5 GB   disk0s2   3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3/dev/disk1   #:                       TYPE NAME                    SIZE       IDENTIFIER   0:     FDisk_partition_scheme                        *15.8 GB    disk1   1:               Windows_NTFS 未命名                  15.8 GB    disk1s1</code></pre><h5 id="使用dd命令将Raspbian系统刷入SD卡"><a href="#使用dd命令将Raspbian系统刷入SD卡" class="headerlink" title="使用dd命令将Raspbian系统刷入SD卡"></a>使用dd命令将Raspbian系统刷入SD卡</h5><p>将Raspbian系统刷入SD卡：（需要特别特别注意disk后的数字，不能搞错，/dev/disk1s1是分区，/dev/disk1是块设备，/dev/rdisk1是原始字符设备）</p><pre><code>sudo dd bs=4m if=2013-02-09-wheezy-raspbian.img of=/dev/rdisk1</code></pre><p>经过几分钟的等待，出现下面的提示，说明SD卡刷好了：</p><pre><code>462+1 records in462+1 records out1939865600 bytes transferred in 163.133220 secs (11891297 bytes/sec)</code></pre><p>卸载设备：</p><pre><code>diskutil unmountDisk /dev/disk1</code></pre><p>得到如下信息，说明卸载成功：</p><pre><code>Unmount of all volumes on disk1 was successful</code></pre><p><strong>现在就可以拔下SD卡，插到树莓派上启动系统了！</strong></p>]]></content>
    
    <summary type="html">
    
      微型电脑树莓派在MacOS下的系统安装
    
    </summary>
    
      <category term="树莓派" scheme="https://blog.travelfun.top/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
      <category term="树莓派" scheme="https://blog.travelfun.top/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins持续化集成，自动打包，OTA分发</title>
    <link href="https://blog.travelfun.top/post/f7f1ad1.html"/>
    <id>https://blog.travelfun.top/post/f7f1ad1.html</id>
    <published>2019-03-07T16:46:46.000Z</published>
    <updated>2019-03-08T07:27:30.193Z</updated>
    
    <content type="html"><![CDATA[<p>整个流程是Jenkins设置自动定时运行脚本，打包生成ipa文件和plist文件，成功之后，自动发送钉钉消息给测试人员，测试人员打开下载地址，OTA安装。</p><blockquote><p>环境：macOS10.12.5，Xcode 8.3.3，ruby2.4.0，java1.8.0</p></blockquote><h3 id="搭建Jenkins"><a href="#搭建Jenkins" class="headerlink" title="搭建Jenkins"></a><a href="https://yzbwork.github.io/2019/03/08/Jenkins搭建/" target="_blank" rel="noopener">搭建Jenkins</a></h3><h3 id="自动打包"><a href="#自动打包" class="headerlink" title="自动打包"></a>自动打包</h3><p>自动打包用的是一个自动打包的脚本：PPAutoPackageScript ，GitHub地址：<a href="https://github.com/jkpang/PPAutoPackageScript" target="_blank" rel="noopener">https://github.com/jkpang/PPAutoPackageScript</a><br>PPAutoPackageScript在本地的用法见GitHub，作者写了详细的使用方法。整体来说没有难度，按步骤来就行。先把脚本里面需要自己修改的部分，修改完成之后，测试打包没问题，再继续下一步。<br><strong><em>注意：Xcode证书管理部分不要设置自动管理，否则会报错</em></strong></p><h3 id="OTA分发部分"><a href="#OTA分发部分" class="headerlink" title="OTA分发部分"></a>OTA分发部分</h3><p>OTA分发，我是在本地搭建的服务器，目前OTA分发只支持Https，所以需要OpenSSL自制证书。后面有具体方法，先搭建服务器。</p><h4 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h4><p>macOS 自带apache服务，所以终端输入 sudo apachectl start ，浏览器输入<a href="http://127.0.0.1" target="_blank" rel="noopener">http://127.0.0.1</a>，如果出现It Works!，OK，服务器启动成功。</p><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><p>服务器默认目录<strong>“/Library/WebServer/Documents/“</strong>，编辑<strong>“/etc/apache2/httpd.conf “</strong>，找到</p><blockquote><p>DocumentRoot “/Library/WebServer/Documents”<br> <directory " library webserver documents"></directory></p></blockquote><p>改为你想作为服务器根目录的路径。<br>其他修改如下图：<br><img src="https://user-gold-cdn.xitu.io/2019/3/7/16955c9eca389d6d?w=1080&amp;h=1020&amp;f=png&amp;s=253214" alt="截图1.png"></p><h4 id="OpenSSL自制证书"><a href="#OpenSSL自制证书" class="headerlink" title="OpenSSL自制证书"></a>OpenSSL自制证书</h4><h5 id="生成服务器的私钥"><a href="#生成服务器的私钥" class="headerlink" title="生成服务器的私钥"></a>生成服务器的私钥</h5><pre><code>mkdir /private/etc/apache2/sslcd /private/etc/apache2/sslsudo openssl genrsa -out server.key 1024</code></pre><h5 id="生成签署申请"><a href="#生成签署申请" class="headerlink" title="生成签署申请"></a>生成签署申请</h5><pre><code>sudo openssl req -new -key server.key -out server.csr</code></pre><p>(需要输入多个项目，其中Common Name为服务器的域名或IP)</p><h5 id="生成CA私钥"><a href="#生成CA私钥" class="headerlink" title="生成CA私钥"></a>生成CA私钥</h5><pre><code>sudo openssl genrsa  -out ca.key 1024</code></pre><h5 id="用CA的私钥产生CA的自签署证书"><a href="#用CA的私钥产生CA的自签署证书" class="headerlink" title="用CA的私钥产生CA的自签署证书"></a>用CA的私钥产生CA的自签署证书</h5><pre><code>sudo openssl req  -new -x509 -days 365 -key ca.key -out ca.crt</code></pre><h5 id="创建demoCA"><a href="#创建demoCA" class="headerlink" title="创建demoCA"></a>创建demoCA</h5><pre><code>sudo mkdir demoCAcd demoCAmkdir newcerts</code></pre><p>创建文件index.txt和serial，serial内容为01，index.txt为空(<strong><em>index.txt必须为空，否则后报错</em></strong>)<br>返回ssl文件夹</p><pre><code>sudo openssl ca -in server.csr -out server.crt -cert ca.crt -keyfile ca.key</code></pre><p>目前为止生成了server.crt，server.key，ca.crt文件，位置分别为<strong>“/private/etc/apache2/ssl/server.crt”</strong>，<strong>“/private/etc/apache2/ssl/server.key”</strong>，ca.crt 放在文件根目录(也就是前面DocumentRoot文件夹中)。</p><h4 id="配置服务器的SSL服务"><a href="#配置服务器的SSL服务" class="headerlink" title="配置服务器的SSL服务"></a>配置服务器的SSL服务</h4><p>编辑/private/etc/apache2/httpd.conf，去掉下面几个项目的注释(去掉前面的‘#’)</p><pre><code>LoadModule ssl_module libexec/apache2/mod_ssl.so LoadModule socache_shmcb_module libexec/apache2/mod_socache_shmcb.soInclude /private/etc/apache2/extra/httpd-ssl.conf Include /private/etc/apache2/extra/httpd-vhosts.conf</code></pre><h5 id="编辑-private-etc-apache2-extra-httpd-ssl-conf"><a href="#编辑-private-etc-apache2-extra-httpd-ssl-conf" class="headerlink" title="编辑/private/etc/apache2/extra/httpd-ssl.conf"></a>编辑/private/etc/apache2/extra/httpd-ssl.conf</h5><p>修改下面两项的路径，改为刚才ssl证书存放的路径，如下：</p><pre><code>SSLCertificateFile &quot;/private/etc/apache2/ssl/server.crt&quot;SSLCertificateKeyFile &quot;/private/etc/apache2/ssl/server.key&quot;</code></pre><h5 id="编辑-private-etc-apache2-extra-httpd-vhosts-conf"><a href="#编辑-private-etc-apache2-extra-httpd-vhosts-conf" class="headerlink" title="编辑/private/etc/apache2/extra/httpd-vhosts.conf"></a>编辑/private/etc/apache2/extra/httpd-vhosts.conf</h5><p>文件末尾添加：</p><pre><code>&lt;VirtualHost *:443&gt;     SSLEngine on     SSLCipherSuite ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL     SSLCertificateFile /private/etc/apache2/ssl/server.crt    SSLCertificateKeyFile /private/etc/apache2/ssl/server.key     ServerName 192.168.1.35(服务器的IP)    DocumentRoot &quot;同上面的DocumentRoot路径&quot; &lt;/VirtualHost&gt;</code></pre><p>添加完之后</p><pre><code>sudo apachectl configtest</code></pre><p>有问题按照提示开启相关服务，没问题的话重启服务器</p><pre><code>sudo apachectl restart</code></pre><p>到此就可以https访问服务器了。</p><h4 id="编写OTA安装需要的plist文件，以及服务器页面"><a href="#编写OTA安装需要的plist文件，以及服务器页面" class="headerlink" title="编写OTA安装需要的plist文件，以及服务器页面"></a>编写OTA安装需要的plist文件，以及服务器页面</h4><p>在服务器的根目录(DocumentRoot目录)下，新建plist文件，命名为manifest.plist文件根据自己的情况修改，两个图片地址可要可不要，文件模版如下：</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;&lt;plist version=&quot;1.0&quot;&gt;&lt;dict&gt;&lt;key&gt;items&lt;/key&gt;&lt;array&gt;    &lt;dict&gt;        &lt;key&gt;assets&lt;/key&gt;        &lt;array&gt;            &lt;dict&gt;                &lt;key&gt;kind&lt;/key&gt;                &lt;string&gt;software-package&lt;/string&gt;                &lt;key&gt;url&lt;/key&gt;                &lt;string&gt;https://192.168.1.35/pay.ipa&lt;/string&gt;            &lt;/dict&gt;            &lt;dict&gt;                &lt;key&gt;kind&lt;/key&gt;                &lt;string&gt;display-image&lt;/string&gt;                &lt;key&gt;url&lt;/key&gt;                &lt;string&gt;https://192.168.1.35/pay57.png&lt;/string&gt;            &lt;/dict&gt;            &lt;dict&gt;                &lt;key&gt;kind&lt;/key&gt;                &lt;string&gt;full-size-image&lt;/string&gt;                &lt;key&gt;url&lt;/key&gt;                &lt;string&gt;https://192.168.1.35/pay512.png&lt;/string&gt;            &lt;/dict&gt;        &lt;/array&gt;        &lt;key&gt;metadata&lt;/key&gt;        &lt;dict&gt;            &lt;key&gt;bundle-identifier&lt;/key&gt;            &lt;string&gt;打包的bundleidentifier&lt;/string&gt;            &lt;key&gt;bundle-version&lt;/key&gt;            &lt;string&gt;app版本号&lt;/string&gt;            &lt;key&gt;kind&lt;/key&gt;            &lt;string&gt;software&lt;/string&gt;            &lt;key&gt;title&lt;/key&gt;            &lt;string&gt;app名称&lt;/string&gt;        &lt;/dict&gt;    &lt;/dict&gt;&lt;/array&gt;&lt;/dict&gt;&lt;/plist&gt;</code></pre><p> plist文件创建后，再新建index.html，要包含app的下载地址和SSL证书的下载地址，其他部分自己写，下载地址如下：</p><pre><code>&lt;a href=&quot;itms-services://?action=download-manifest&amp;url=https://192.168.1.35/manifest.plist&quot;&gt;appName&lt;/a&gt;  &lt;a href=&quot;http://192.168.1.35/ca.crt&quot;&gt;安装SSL证书&lt;/a&gt;</code></pre><p>到目前为止，所有电脑上的设置结束了，可以把第二步测试生成的adhoc版app和ca.crt 文件，放在服务区根目录下，测试一下OTA安装是否可用。</p><h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><p>手机跟电脑在同一个局域网内，手机访问服务器的页面，先点击<strong>安装SSL证书</strong>，安装证书，然后在<strong>设置</strong>——&gt;<strong>通用</strong>——&gt;<strong>描述文件</strong>，设置刚才安装的证书为信任。接下来最重要的一步，<strong>设置</strong>——&gt;<strong>通用</strong>——&gt;<strong>关于本机</strong>，最下面的证书信任设置，再次设置信任。这个时候再返回网页才能下载安装app。否则会出现”无法连接***”。测试没有问题，进行下一步。</p><h3 id="所有流程串起来"><a href="#所有流程串起来" class="headerlink" title="所有流程串起来"></a>所有流程串起来</h3><p>这一步需要把Jenkins和OTA分发服务器，钉钉连通，整个流程走通<br>PPAutoPackageScript 脚本除了作者建议修改的部分外，我们还需要根据需求稍作修改。<br>首先，修改输出ipa路径，改为服务器的根目录，如图：<br><img src="https://user-gold-cdn.xitu.io/2019/3/7/16955c9eca4602e6?w=561&amp;h=210&amp;f=png&amp;s=59876" alt="修改输出ipa路径.png"><br>这样输出的ipa文件直接就在根目录，不需要再复制ipa文件到根目录下，路径要和plist文件里的下载路径一样。但是还有一个问题，plist文件中，bundle-identifier还好，一个项目中基本上不会修改，但是版本号会经常变。我的解决方法比较笨，直接重新生成plist文件，在脚本ipa文件输出成功之后打开输出目录之前（open $export_path，这一步的前面）添加如下代码，仅供参考：</p><pre><code>cd $export_pathcat &lt;&lt; EOF &gt; manifest.plist&lt;...&gt; &lt;key&gt;url&lt;/key&gt;&lt;string&gt;https://192.168.1.35/App/v$bundle_version/${ipa_name}.ipa&lt;/string&gt;&lt;...&gt;&lt;dict&gt;&lt;key&gt;bundle-identifier&lt;/key&gt;&lt;string&gt;打包的bundleidentifier&lt;/string&gt;&lt;key&gt;bundle-version&lt;/key&gt;&lt;string&gt;$bundle_version&lt;/string&gt;&lt;key&gt;kind&lt;/key&gt;&lt;string&gt;software&lt;/string&gt;&lt;key&gt;title&lt;/key&gt;&lt;string&gt;$scheme_name&lt;/string&gt;&lt;...&gt;EOF</code></pre><p> &lt;…&gt;部分跟前面的plist模版一样，不再重复，可以直接复制模版修改。这里的下载路径包括脚本里的export_path也即输出路径，根据自己的需求修改，如果是直接生成在根目录下，<a href="https://192.168.1.35/${ipa_name}.ipa" target="_blank" rel="noopener">https://192.168.1.35/${ipa_name}.ipa</a>这样写，生成的新ipa文件会覆盖旧的。我这里是让它每次根据版本号输出到不同的文件夹。</p><p>脚本文件修改完毕之后，登陆Jenkins，进入之前建的项目中，点击配置，在钉钉通知消息这一步的前面<strong>增加构建步骤</strong>，如图：<br><img src="https://user-gold-cdn.xitu.io/2019/3/7/16955c9eca4af431?w=705&amp;h=320&amp;f=png&amp;s=22201" alt="增加构建步骤.png"><br>第一行是打开脚本所在的位置，第二行运行脚本。<br>OK，保存，返回项目点击<strong>立即构建</strong>。测试没有问题之后，再在配置里面设置定时构建，语法点击输入框后面的问号有参考。<br>以上就是整个全部流程，自己正在用，网上好多步骤不完整或是比较老，出现错误参考每一步的 <strong><em>注意</em></strong> 部分，特别要注意iOS10 出现无法连接到***的错误！！！。有错误的地方请指正，互相交流。</p>]]></content>
    
    <summary type="html">
    
      Jenkins设置自动定时运行脚本，打包生成ipa文件和plist文件，成功之后，自动发送钉钉消息给测试人员，测试人员打开下载地址，OTA安装。
    
    </summary>
    
      <category term="Tools" scheme="https://blog.travelfun.top/categories/Tools/"/>
    
    
      <category term="iOS" scheme="https://blog.travelfun.top/tags/iOS/"/>
    
      <category term="Jenkins" scheme="https://blog.travelfun.top/tags/Jenkins/"/>
    
      <category term="打包" scheme="https://blog.travelfun.top/tags/%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
</feed>
